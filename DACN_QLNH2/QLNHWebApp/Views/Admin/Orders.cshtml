@model IEnumerable<QLNHWebApp.Models.Order>
@{
    ViewData["Title"] = "Quản lý Hóa đơn";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0"><i class="bx bx-receipt me-2"></i>Quản lý Hóa đơn</h4>
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="@Url.Action("Dashboard", "Admin")">Dashboard</a></li>
                        <li class="breadcrumb-item active">Hóa đơn</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm stats-card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <span class="text-muted d-block mb-1">Tổng đơn hàng</span>
                            <h4 class="mb-0 text-primary">@Model.Count()</h4>
                        </div>
                        <div class="flex-shrink-0">
                            <div class="avatar-md rounded bg-primary bg-gradient d-flex align-items-center justify-content-center">
                                <i class="bx bx-receipt text-white fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm stats-card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <span class="text-muted d-block mb-1">Chờ xác nhận</span>
                            <h4 class="mb-0 text-warning">@Model.Count(o => o.Status == "Chờ xác nhận")</h4>
                        </div>
                        <div class="flex-shrink-0">
                            <div class="avatar-md rounded bg-warning bg-gradient d-flex align-items-center justify-content-center">
                                <i class="bx bx-time text-white fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm stats-card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <span class="text-muted d-block mb-1">Đã xác nhận</span>
                            <h4 class="mb-0 text-success">@Model.Count(o => o.Status == "Đã xác nhận")</h4>
                        </div>
                        <div class="flex-shrink-0">
                            <div class="avatar-md rounded bg-success bg-gradient d-flex align-items-center justify-content-center">
                                <i class="bx bx-check text-white fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm stats-card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <span class="text-muted d-block mb-1">Tổng doanh thu</span>
                            <h4 class="mb-0 text-info">@Model.Sum(o => o.TotalPrice).ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</h4>
                        </div>
                        <div class="flex-shrink-0">
                            <div class="avatar-md rounded bg-info bg-gradient d-flex align-items-center justify-content-center">
                                <i class="bx bx-dollar text-white fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row g-3 align-items-end">
                        <div class="col-lg-4 col-md-6">
                            <label class="form-label">Tìm kiếm</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bx bx-search"></i></span>
                                <input type="text" class="form-control" id="searchInput" placeholder="Tên khách hàng, SĐT...">
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <label class="form-label">Trạng thái</label>
                            <select class="form-select" id="statusFilter">
                                <option value="">Tất cả trạng thái</option>
                                <option value="Chờ xác nhận">Chờ xác nhận</option>
                                <option value="Đã xác nhận">Đã xác nhận</option>
                                <option value="Hoàn thành">Hoàn thành</option>
                                <option value="Đã hủy">Đã hủy</option>
                            </select>
                        </div>
                        <div class="col-lg-5 col-md-12">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-primary" onclick="filterOrders()">
                                    <i class="bx bx-search me-1"></i>Tìm kiếm
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="resetFilters()">
                                    <i class="bx bx-reset me-1"></i>Reset
                                </button>
                                <button type="button" class="btn btn-outline-success" onclick="refreshData()">
                                    <i class="bx bx-refresh me-1"></i>Làm mới
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Orders Table -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-transparent">
                    <h5 class="card-title mb-0">
                        <i class="bx bx-list-ul me-2"></i>Danh sách đơn hàng (@Model.Count())
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="ordersTable">
                                <thead class="table-light">
                                    <tr>
                                        <th class="text-center">#</th>
                                        <th>Thông tin khách hàng</th>
                                        <th class="text-center">Ngày đặt</th>
                                        <th class="text-center">Giờ</th>
                                        <th class="text-center">Số khách</th>
                                        <th>Món đã đặt</th>
                                        <th class="text-end">Tổng tiền</th>
                                        <th class="text-center">Trạng thái</th>
                                        <th class="text-center">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in Model.OrderByDescending(o => o.Id))
                                    {
                                        <tr data-order-id="@order.Id">
                                            <td class="text-center fw-bold">#@order.Id.ToString("D4")</td>
                                            <td>
                                                <div>
                                                    <span class="fw-semibold d-block">@order.CustomerName</span>
                                                    <small class="text-muted">
                                                        <i class="bx bx-phone me-1"></i>@order.Phone
                                                    </small>
                                                </div>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-light text-dark">
                                                    @order.Date.ToString("dd/MM/yyyy")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-info">@order.Time</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-secondary">@order.Guests người</span>
                                            </td>
                                            <td>
                                                @if (order.OrderItems != null && order.OrderItems.Any())
                                                {
                                                    <div class="order-items">
                                                        @{int itemCount = 0;}
                                                        @foreach (var item in order.OrderItems.Take(3))
                                                        {
                                                            <div class="item-row">
                                                                <span class="text-primary fw-medium">@(item.MenuItem?.Name ?? "Món ăn")</span>
                                                                <span class="badge bg-secondary ms-1">x@(item.Quantity)</span>
                                                            </div>
                                                            itemCount++;
                                                        }
                                                        @if (order.OrderItems.Count() > 3)
                                                        {
                                                            <small class="text-muted">và @(order.OrderItems.Count() - 3) món khác...</small>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <em class="text-muted">Chưa có món ăn</em>
                                                }
                                            </td>
                                            <td class="text-end fw-bold text-success">
                                                @order.TotalPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                                            </td>
                                            <td class="text-center">
                                                @{
                                                    string badgeClass = order.Status switch
                                                    {
                                                        "Chờ xác nhận" => "bg-warning",
                                                        "Đã xác nhận" => "bg-success",
                                                        "Hoàn thành" => "bg-primary",
                                                        "Đã hủy" => "bg-danger",
                                                        "Pending" => "bg-warning",
                                                        "Confirmed" => "bg-success",
                                                        "Cancelled" => "bg-danger",
                                                        "restaurant" => "bg-info",
                                                        _ => "bg-secondary"
                                                    };
                                                    
                                                    string statusText = order.Status switch
                                                    {
                                                        "Pending" => "Chờ xác nhận",
                                                        "Confirmed" => "Đã xác nhận",
                                                        "Cancelled" => "Đã hủy",
                                                        "restaurant" => "Thanh toán trực tiếp",
                                                        _ => order.Status
                                                    };
                                                }
                                                <span class="badge @badgeClass">@statusText</span>
                                            </td>
                                            <td class="text-center">
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-outline-primary btn-sm" 
                                                            onclick="viewOrderDetail(@order.Id)" 
                                                            title="Xem chi tiết">
                                                        <i class="bx bx-show"></i>
                                                    </button>
                                                    @if (order.Status == "Chờ xác nhận" || order.Status == "Pending")
                                                    {
                                                        <button type="button" class="btn btn-outline-success btn-sm" 
                                                                onclick="updateOrderStatus(@order.Id, 'Đã xác nhận')"
                                                                title="Xác nhận đơn hàng">
                                                            <i class="bx bx-check"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                                onclick="updateOrderStatus(@order.Id, 'Đã hủy')"
                                                                title="Hủy đơn hàng">
                                                            <i class="bx bx-x"></i>
                                                        </button>
                                                    }
                                                    @if (order.Status == "Đã xác nhận" || order.Status == "Confirmed")
                                                    {
                                                        <button type="button" class="btn btn-outline-info btn-sm" 
                                                                onclick="updateOrderStatus(@order.Id, 'Hoàn thành')"
                                                                title="Hoàn thành đơn hàng">
                                                            <i class="bx bx-check-double"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-5">
                            <div class="mb-4">
                                <i class="bx bx-receipt" style="font-size: 4rem; color: #e9ecef;"></i>
                            </div>
                            <h5 class="text-muted">Chưa có đơn hàng nào</h5>
                            <p class="text-muted">Khi khách hàng đặt bàn, thông tin sẽ hiển thị ở đây.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
        </div>
    </div>
</div>

<!-- Order Detail Modal -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">
                    <i class="bx bx-receipt me-2"></i>Chi tiết đơn hàng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="orderDetailContent">
                <!-- Order details will be loaded here -->
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Filter orders
        function filterOrders() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            
            const rows = document.querySelectorAll('#ordersTable tbody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const customerInfo = row.cells[1].textContent.toLowerCase();
                const status = row.cells[7].textContent.trim();
                
                let show = true;
                
                if (searchTerm && !customerInfo.includes(searchTerm)) {
                    show = false;
                }
                
                if (statusFilter && !status.includes(statusFilter)) {
                    show = false;
                }
                
                row.style.display = show ? '' : 'none';
                if (show) visibleCount++;
            });
            
            // Update visible count
            updateVisibleCount(visibleCount);
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            
            const rows = document.querySelectorAll('#ordersTable tbody tr');
            rows.forEach(row => row.style.display = '');
            
            updateVisibleCount(rows.length);
        }

        // Update visible count
        function updateVisibleCount(count) {
            const titleElement = document.querySelector('.card-title');
            const totalCount = document.querySelectorAll('#ordersTable tbody tr').length;
            titleElement.innerHTML = `<i class="bx bx-list-ul me-2"></i>Danh sách đơn hàng (${count}/${totalCount})`;
        }

        // View order detail
        function viewOrderDetail(orderId) {
            const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
            modal.show();
            
            // Load order detail via AJAX
            fetch(`/Admin/OrderDetail/${orderId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể tải thông tin');
                    }
                    return response.text();
                })
                .then(html => {
                    document.getElementById('orderDetailContent').innerHTML = html;
                })
                .catch(error => {
                    console.error('Error loading order detail:', error);
                    document.getElementById('orderDetailContent').innerHTML = `
                        <div class="alert alert-danger text-center">
                            <i class="bx bx-error-circle fs-2 mb-2 d-block"></i>
                            <h5>Không thể tải thông tin chi tiết</h5>
                            <p class="mb-0">Vui lòng thử lại sau</p>
                        </div>
                    `;
                });
        }

        // Update order status
        function updateOrderStatus(orderId, newStatus) {
            if (!confirm(`Bạn có chắc muốn cập nhật trạng thái đơn hàng thành "${newStatus}"?`)) {
                return;
            }

            // Show loading
            const row = document.querySelector(`tr[data-order-id="${orderId}"]`);
            const statusCell = row.cells[7];
            const originalContent = statusCell.innerHTML;
            statusCell.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';

            // Simulate API call (replace with actual implementation)
            setTimeout(() => {
                // Update status badge
                let badgeClass = '';
                switch (newStatus) {
                    case 'Đã xác nhận':
                        badgeClass = 'bg-success';
                        break;
                    case 'Hoàn thành':
                        badgeClass = 'bg-primary';
                        break;
                    case 'Đã hủy':
                        badgeClass = 'bg-danger';
                        break;
                    default:
                        badgeClass = 'bg-secondary';
                }
                
                statusCell.innerHTML = `<span class="badge ${badgeClass}">${newStatus}</span>`;
                
                // Update action buttons
                updateActionButtons(row, newStatus);
                
                // Show success message
                showNotification(`Đã cập nhật trạng thái đơn hàng #${orderId} thành "${newStatus}"`, 'success');
            }, 1000);
        }

        // Update action buttons based on status
        function updateActionButtons(row, status) {
            const actionCell = row.cells[8];
            let buttonsHtml = `
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary btn-sm" 
                            onclick="viewOrderDetail(${row.dataset.orderId})" 
                            title="Xem chi tiết">
                        <i class="bx bx-show"></i>
                    </button>
            `;
            
            if (status === 'Chờ xác nhận') {
                buttonsHtml += `
                    <button type="button" class="btn btn-outline-success btn-sm" 
                            onclick="updateOrderStatus(${row.dataset.orderId}, 'Đã xác nhận')"
                            title="Xác nhận đơn hàng">
                        <i class="bx bx-check"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" 
                            onclick="updateOrderStatus(${row.dataset.orderId}, 'Đã hủy')"
                            title="Hủy đơn hàng">
                        <i class="bx bx-x"></i>
                    </button>
                `;
            } else if (status === 'Đã xác nhận') {
                buttonsHtml += `
                    <button type="button" class="btn btn-outline-info btn-sm" 
                            onclick="updateOrderStatus(${row.dataset.orderId}, 'Hoàn thành')"
                            title="Hoàn thành đơn hàng">
                        <i class="bx bx-check-double"></i>
                    </button>
                `;
            }
            
            buttonsHtml += '</div>';
            actionCell.innerHTML = buttonsHtml;
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 3000);
        }

        // Refresh data
        function refreshData() {
            location.reload();
        }

        // Search on input
        document.getElementById('searchInput').addEventListener('input', filterOrders);
        document.getElementById('statusFilter').addEventListener('change', filterOrders);

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>

    <style>
        .stats-card {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .stats-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
        }
        
        .avatar-md {
            height: 3.5rem;
            width: 3.5rem;
            transition: transform 0.3s ease;
        }
        
        .stats-card:hover .avatar-md {
            transform: scale(1.05);
        }
        
        .table th {
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            padding: 1rem 0.75rem;
            border-bottom: 2px solid #e9ecef;
        }
        
        .table td {
            padding: 1rem 0.75rem;
            vertical-align: middle;
        }
        
        .table tbody tr {
            transition: all 0.2s ease;
        }
        
        .table tbody tr:hover {
            background-color: rgba(102, 126, 234, 0.05);
            transform: scale(1.01);
        }
        
        .badge {
            font-size: 0.75rem;
            padding: 0.5em 0.75em;
            font-weight: 500;
        }
        
        .btn-group .btn {
            border-radius: 0.375rem;
            margin: 0 1px;
            transition: all 0.2s ease;
        }
        
        .btn-group .btn:hover {
            transform: translateY(-1px);
        }
        
        .form-control, .form-select {
            border-radius: 0.5rem;
            border: 1px solid #e3e6f0;
            transition: all 0.2s ease;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .order-items .item-row {
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }
        
        .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        }
        
        .modal-header {
            border-bottom: 1px solid #f1f3f4;
            padding: 1.5rem;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .input-group-text {
            border-color: #e3e6f0;
            background-color: #f8f9fa;
        }
        
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .btn-group .btn:active {
            animation: pulse 0.2s ease-in-out;
        }
    </style>
}