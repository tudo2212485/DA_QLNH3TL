@model IEnumerable<QLNHWebApp.Models.Employee>
@{
    ViewData["Title"] = "Qu·∫£n l√Ω Nh√¢n vi√™n";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid px-4">
    <!-- Page Header v·ªõi gradient hi·ªán ƒë·∫°i -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-header-modern">
                <div>
                    <h3 class="page-title-modern">
                        <i class="bx bx-group me-2"></i>Qu·∫£n l√Ω Nh√¢n vi√™n
                    </h3>
                    <p class="page-subtitle-modern">Qu·∫£n l√Ω th√¥ng tin v√† ph√¢n quy·ªÅn nh√¢n vi√™n nh√† h√†ng</p>
                </div>
                <div>
                    <button type="button" class="btn-add-modern" onclick="showAddEmployeeModal()">
                        <i class="bx bx-plus me-2"></i>Th√™m nh√¢n vi√™n
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards - Thi·∫øt k·∫ø m·ªõi hi·ªán ƒë·∫°i -->
    <div class="row g-4 mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="employee-stat-card stat-primary">
                <div class="stat-icon-wrapper">
                    <div class="stat-icon">
                        <i class="bx bx-group"></i>
                    </div>
                </div>
                <div class="stat-info">
                    <div class="stat-label">T·ªïng nh√¢n vi√™n</div>
                    <div class="stat-number">@Model.Count()</div>
                    <div class="stat-badge">
                        <span>T·∫•t c·∫£</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6">
            <div class="employee-stat-card stat-danger">
                <div class="stat-icon-wrapper">
                    <div class="stat-icon">
                        <i class="bx bx-shield"></i>
                    </div>
                </div>
                <div class="stat-info">
                    <div class="stat-label">Admin</div>
                    <div class="stat-number">@Model.Count(e => e.Role == "Admin")</div>
                    <div class="stat-badge">
                        <span>To√†n quy·ªÅn</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6">
            <div class="employee-stat-card stat-success">
                <div class="stat-icon-wrapper">
                    <div class="stat-icon">
                        <i class="bx bx-user"></i>
                    </div>
                </div>
                <div class="stat-info">
                    <div class="stat-label">Nh√¢n vi√™n</div>
                    <div class="stat-number">@Model.Count(e => e.Role == "Nh√¢n vi√™n")</div>
                    <div class="stat-badge">
                        <span>Ph·ª•c v·ª•</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6">
            <div class="employee-stat-card stat-info">
                <div class="stat-icon-wrapper">
                    <div class="stat-icon">
                        <i class="bx bx-food-menu"></i>
                    </div>
                </div>
                <div class="stat-info">
                    <div class="stat-label">ƒê·∫ßu b·∫øp</div>
                    <div class="stat-number">@Model.Count(e => e.Role == "ƒê·∫ßu b·∫øp")</div>
                    <div class="stat-badge">
                        <span>Ch·∫ø bi·∫øn</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search & Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="search-filter-card">
                <div class="row g-3 align-items-end">
                    <div class="col-lg-5 col-md-6">
                        <label class="modern-label">
                            <i class="bx bx-search me-1"></i>T√¨m ki·∫øm
                        </label>
                        <div class="modern-input-wrapper">
                            <input type="text" class="modern-input" id="searchInput" 
                                   placeholder="Nh·∫≠p t√™n, username ho·∫∑c email...">
                            <i class="bx bx-search input-icon"></i>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <label class="modern-label">
                            <i class="bx bx-filter me-1"></i>L·ªçc theo vai tr√≤
                        </label>
                        <select class="modern-select" id="roleFilter">
                            <option value="">T·∫•t c·∫£ vai tr√≤</option>
                            <option value="Admin">üëë Admin</option>
                            <option value="Nh√¢n vi√™n">üçΩÔ∏è Nh√¢n vi√™n</option>
                            <option value="ƒê·∫ßu b·∫øp">üë®‚Äçüç≥ ƒê·∫ßu b·∫øp</option>
                        </select>
                    </div>
                    <div class="col-lg-4 col-md-12">
                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn-filter" onclick="filterEmployees()">
                                <i class="bx bx-search-alt me-1"></i>T√¨m ki·∫øm
                            </button>
                            <button type="button" class="btn-reset" onclick="resetFilters()">
                                <i class="bx bx-reset me-1"></i>Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Employees Table -->
    <div class="row">
        <div class="col-12">
            <div class="employees-table-card">
                <div class="table-header">
                    <h5 class="table-title">
                        <i class="bx bx-list-ul me-2"></i>Danh s√°ch nh√¢n vi√™n (@Model.Count()/@Model.Count())
                    </h5>
                </div>
                <div class="table-container">
                    @if (Model.Any())
                    {
                        <table class="modern-table" id="employeesTable">
                            <thead>
                                <tr>
                                    <th class="text-center" style="width: 60px">#</th>
                                    <th>TH√îNG TIN NH√ÇN VI√äN</th>
                                    <th class="text-center" style="width: 140px">USERNAME</th>
                                    <th class="text-center" style="width: 150px">VAI TR√í</th>
                                    <th class="text-center" style="width: 120px">NG√ÄY T·∫†O</th>
                                    <th class="text-center" style="width: 130px">TR·∫†NG TH√ÅI</th>
                                    <th class="text-center" style="width: 140px">THAO T√ÅC</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var employee in Model.OrderBy(e => e.Id))
                                {
                                    <tr data-employee-id="@employee.Id" class="employee-row">
                                        <td class="text-center">
                                            <span class="employee-number">@employee.Id</span>
                                        </td>
                                        <td>
                                            <div class="employee-info-cell">
                                                <div class="employee-avatar">
                                                    <i class="bx bx-user"></i>
                                                </div>
                                                <div class="employee-details">
                                                    <div class="employee-name">@employee.FullName</div>
                                                    <div class="employee-email">
                                                        <i class="bx bx-envelope me-1"></i>@employee.Email
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            <span class="username-badge">@employee.Username</span>
                                        </td>
                                        <td class="text-center">
                                            @{
                                                string roleClass = employee.Role switch
                                                {
                                                    "Admin" => "role-admin",
                                                    "Nh√¢n vi√™n" => "role-staff",
                                                    "ƒê·∫ßu b·∫øp" => "role-chef",
                                                    _ => "role-default"
                                                };
                                                
                                                string roleIcon = employee.Role switch
                                                {
                                                    "Admin" => "bx-shield",
                                                    "Nh√¢n vi√™n" => "bx-user",
                                                    "ƒê·∫ßu b·∫øp" => "bx-food-menu",
                                                    _ => "bx-user"
                                                };
                                            }
                                            <span class="role-badge @roleClass">
                                                <i class="bx @roleIcon"></i>
                                                <span>@employee.Role</span>
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <span class="date-text">@employee.CreatedAt.ToString("dd/MM/yyyy")</span>
                                        </td>
                                        <td class="text-center">
                                            @if (employee.IsActive)
                                            {
                                                <span class="status-badge status-active">
                                                    <i class="bx bx-check-circle"></i>
                                                    <span>Ho·∫°t ƒë·ªông</span>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="status-badge status-inactive">
                                                    <i class="bx bx-x-circle"></i>
                                                    <span>Ng∆∞ng</span>
                                                </span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <div class="action-buttons">
                                                <button type="button" class="action-btn action-view" 
                                                        onclick="viewEmployee(@employee.Id)" 
                                                        title="Xem chi ti·∫øt">
                                                    <i class="bx bx-show"></i>
                                                </button>
                                                <button type="button" class="action-btn action-edit" 
                                                        onclick="editEmployee(@employee.Id)"
                                                        title="Ch·ªânh s·ª≠a">
                                                    <i class="bx bx-edit"></i>
                                                </button>
                                                @if (employee.Username != "admin")
                                                {
                                                    <button type="button" class="action-btn action-delete" 
                                                            onclick="deleteEmployee(@employee.Id, '@employee.FullName')"
                                                            title="X√≥a">
                                                        <i class="bx bx-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="empty-state">
                            <div class="empty-icon">
                                <i class="bx bx-group"></i>
                            </div>
                            <h5 class="empty-title">Ch∆∞a c√≥ nh√¢n vi√™n n√†o</h5>
                            <p class="empty-text">Th√™m nh√¢n vi√™n ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω</p>
                            <button type="button" class="btn-add-modern" onclick="showAddEmployeeModal()">
                                <i class="bx bx-plus me-1"></i>Th√™m nh√¢n vi√™n ngay
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Employee Modal -->
<div class="modal fade" id="employeeModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content modern-modal">
            <div class="modal-header modern-modal-header">
                <h5 class="modal-title" id="employeeModalLabel">
                    <i class="bx bx-user-plus me-2"></i>Th√™m nh√¢n vi√™n m·ªõi
                </h5>
                <button type="button" class="btn-close-modern" data-bs-dismiss="modal">
                    <i class="bx bx-x"></i>
                </button>
            </div>
            <div class="modal-body modern-modal-body">
                <form id="employeeForm">
                    <input type="hidden" id="employeeId" value="0">
                    <div class="row g-4">
                        <div class="col-md-6">
                            <label for="fullName" class="modern-label">
                                H·ªç v√† t√™n <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="modern-input" id="fullName" required 
                                   placeholder="Nh·∫≠p h·ªç v√† t√™n">
                        </div>
                        <div class="col-md-6">
                            <label for="username" class="modern-label">
                                Username <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="modern-input" id="username" required
                                   placeholder="Nh·∫≠p username">
                        </div>
                        <div class="col-md-6">
                            <label for="email" class="modern-label">
                                Email <span class="text-danger">*</span>
                            </label>
                            <input type="email" class="modern-input" id="email" required
                                   placeholder="Nh·∫≠p email">
                        </div>
                        <div class="col-md-6">
                            <label for="role" class="modern-label">
                                Vai tr√≤ <span class="text-danger">*</span>
                            </label>
                            <select class="modern-select" id="role" required>
                                <option value="">Ch·ªçn vai tr√≤</option>
                                <option value="Admin">üëë Admin - To√†n quy·ªÅn</option>
                                <option value="Nh√¢n vi√™n">üçΩÔ∏è Nh√¢n vi√™n - Ph·ª•c v·ª• & Qu·∫£n l√Ω</option>
                                <option value="ƒê·∫ßu b·∫øp">üë®‚Äçüç≥ ƒê·∫ßu b·∫øp - Ch·∫ø bi·∫øn m√≥n ƒÉn</option>
                            </select>
                        </div>
                        <div class="col-md-6" id="passwordGroup">
                            <label for="password" class="modern-label">
                                M·∫≠t kh·∫©u <span class="text-danger">*</span>
                            </label>
                            <div class="password-input-wrapper">
                                <input type="password" class="modern-input" id="password" required
                                       placeholder="T·ªëi thi·ªÉu 6 k√Ω t·ª±">
                                <button type="button" class="password-toggle-btn" onclick="togglePassword()">
                                    <i class="bx bx-show" id="passwordIcon"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6" id="confirmPasswordGroup">
                            <label for="confirmPassword" class="modern-label">
                                X√°c nh·∫≠n m·∫≠t kh·∫©u <span class="text-danger">*</span>
                            </label>
                            <input type="password" class="modern-input" id="confirmPassword" required
                                   placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer modern-modal-footer">
                <button type="button" class="btn-cancel-modal" data-bs-dismiss="modal">
                    <i class="bx bx-x me-1"></i>H·ªßy
                </button>
                <button type="button" class="btn-save-modal" onclick="saveEmployee()">
                    <i class="bx bx-save me-1"></i>L∆∞u
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Employee Modal -->
<div class="modal fade" id="viewEmployeeModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modern-modal">
            <div class="modal-header modern-modal-header">
                <h5 class="modal-title">
                    <i class="bx bx-user me-2"></i>Th√¥ng tin nh√¢n vi√™n
                </h5>
                <button type="button" class="btn-close-modern" data-bs-dismiss="modal">
                    <i class="bx bx-x"></i>
                </button>
            </div>
            <div class="modal-body modern-modal-body" id="employeeDetailContent">
                <!-- Employee details will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Filter employees
        function filterEmployees() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const roleFilter = document.getElementById('roleFilter').value;
            
            const rows = document.querySelectorAll('#employeesTable tbody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const employeeInfo = row.querySelector('.employee-details').textContent.toLowerCase();
                const username = row.querySelector('.username-badge').textContent.toLowerCase();
                const role = row.querySelector('.role-badge span').textContent;
                
                let show = true;
                
                if (searchTerm && !employeeInfo.includes(searchTerm) && !username.includes(searchTerm)) {
                    show = false;
                }
                
                if (roleFilter && !role.includes(roleFilter)) {
                    show = false;
                }
                
                row.style.display = show ? '' : 'none';
                if (show) visibleCount++;
            });
            
            updateVisibleCount(visibleCount);
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('roleFilter').value = '';
            
            const rows = document.querySelectorAll('#employeesTable tbody tr');
            rows.forEach(row => row.style.display = '');
            
            updateVisibleCount(rows.length);
        }

        // Update visible count
        function updateVisibleCount(count) {
            const titleElement = document.querySelector('.table-title');
            const totalCount = document.querySelectorAll('#employeesTable tbody tr').length;
            titleElement.innerHTML = `<i class="bx bx-list-ul me-2"></i>Danh s√°ch nh√¢n vi√™n (${count}/${totalCount})`;
        }

        // Show add employee modal
        function showAddEmployeeModal() {
            document.getElementById('employeeModalLabel').innerHTML = '<i class="bx bx-user-plus me-2"></i>Th√™m nh√¢n vi√™n m·ªõi';
            document.getElementById('employeeForm').reset();
            document.getElementById('employeeId').value = '0';
            document.getElementById('passwordGroup').style.display = 'block';
            document.getElementById('confirmPasswordGroup').style.display = 'block';
            document.getElementById('password').required = true;
            document.getElementById('confirmPassword').required = true;
            
            const modal = new bootstrap.Modal(document.getElementById('employeeModal'));
            modal.show();
        }

        // View employee
        async function viewEmployee(employeeId) {
            try {
                const response = await fetch(`/Admin/GetEmployee?id=${employeeId}`);
                const employee = await response.json();
                
                if (!employee) {
                    showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
                    return;
                }

                const roleClasses = {
                    'Admin': 'bg-danger',
                    'Nh√¢n vi√™n': 'bg-success',
                    'ƒê·∫ßu b·∫øp': 'bg-info'
                };

                const roleClass = roleClasses[employee.role] || 'bg-secondary';

                document.getElementById('employeeDetailContent').innerHTML = `
                    <div class="employee-detail-view">
                        <div class="employee-detail-avatar">
                            <i class="bx bx-user"></i>
                        </div>
                        <h5 class="employee-detail-name">${employee.fullName}</h5>
                        <div class="employee-detail-grid">
                            <div class="detail-item">
                                <div class="detail-label">Username</div>
                                <div class="detail-value">${employee.username}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Email</div>
                                <div class="detail-value">${employee.email}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Vai tr√≤</div>
                                <div class="detail-value">
                                    <span class="badge ${roleClass}">${employee.role}</span>
                                </div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Tr·∫°ng th√°i</div>
                                <div class="detail-value">
                                    <span class="badge ${employee.isActive ? 'bg-success' : 'bg-secondary'}">
                                        ${employee.isActive ? 'Ho·∫°t ƒë·ªông' : 'Ng∆∞ng ho·∫°t ƒë·ªông'}
                                    </span>
                                </div>
                            </div>
                            <div class="detail-item detail-full">
                                <div class="detail-label">Ng√†y t·∫°o</div>
                                <div class="detail-value">${employee.createdAt}</div>
                            </div>
                        </div>
                    </div>
                `;
                
                const modal = new bootstrap.Modal(document.getElementById('viewEmployeeModal'));
                modal.show();
            } catch (error) {
                console.error('Error:', error);
                showNotification('L·ªói khi t·∫£i th√¥ng tin nh√¢n vi√™n', 'error');
            }
        }

        // Edit employee
        async function editEmployee(employeeId) {
            try {
                const response = await fetch(`/Admin/GetEmployee?id=${employeeId}`);
                const employee = await response.json();
                
                if (!employee) {
                    showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
                    return;
                }

                document.getElementById('employeeModalLabel').innerHTML = '<i class="bx bx-user-edit me-2"></i>Ch·ªânh s·ª≠a nh√¢n vi√™n';
                document.getElementById('employeeId').value = employeeId;
                document.getElementById('passwordGroup').style.display = 'none';
                document.getElementById('confirmPasswordGroup').style.display = 'none';
                document.getElementById('password').required = false;
                document.getElementById('confirmPassword').required = false;
                
                // Load employee data
                document.getElementById('fullName').value = employee.fullName;
                document.getElementById('username').value = employee.username;
                document.getElementById('email').value = employee.email;
                document.getElementById('role').value = employee.role;
                
                const modal = new bootstrap.Modal(document.getElementById('employeeModal'));
                modal.show();
            } catch (error) {
                console.error('Error:', error);
                showNotification('L·ªói khi t·∫£i th√¥ng tin nh√¢n vi√™n', 'error');
            }
        }

        // Delete employee
        async function deleteEmployee(employeeId, employeeName) {
            if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n "${employeeName}"?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`)) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('id', employeeId);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                const response = await fetch('/Admin/DeleteEmployee', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message, 'success');
                    
                    // Remove row with animation
                    const row = document.querySelector(`tr[data-employee-id="${employeeId}"]`);
                    if (row) {
                        row.style.opacity = '0.5';
                        setTimeout(() => {
                            row.remove();
                            updateVisibleCount(document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"])').length);
                        }, 500);
                    }
                } else {
                    showNotification(result.message, 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('L·ªói khi x√≥a nh√¢n vi√™n', 'danger');
            }
        }

        // Save employee
        async function saveEmployee() {
            const form = document.getElementById('employeeForm');
            const employeeId = document.getElementById('employeeId').value;
            const isEditing = employeeId !== '0';
            
            // Basic validation
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }
            
            // Password validation for new employee
            if (!isEditing) {
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                if (password.length < 6) {
                    showNotification('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±', 'warning');
                    return;
                }
                
                if (password !== confirmPassword) {
                    showNotification('X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp', 'warning');
                    return;
                }
            }
            
            // Prepare form data
            const formData = new FormData();
            formData.append('fullName', document.getElementById('fullName').value);
            formData.append('username', document.getElementById('username').value);
            formData.append('email', document.getElementById('email').value);
            formData.append('role', document.getElementById('role').value);
            
            if (isEditing) {
                formData.append('id', employeeId);
            } else {
                formData.append('password', document.getElementById('password').value);
            }

            // Add CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            formData.append('__RequestVerificationToken', token);
            
            try {
                const url = isEditing ? '/Admin/UpdateEmployee' : '/Admin/CreateEmployee';
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message, 'success');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('employeeModal'));
                    modal.hide();
                    
                    // Reload page after short delay
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(result.message, 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('L·ªói khi l∆∞u th√¥ng tin nh√¢n vi√™n', 'danger');
            }
        }

        // Toggle password visibility
        function togglePassword() {
            const passwordField = document.getElementById('password');
            const passwordIcon = document.getElementById('passwordIcon');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                passwordIcon.className = 'bx bx-hide';
            } else {
                passwordField.type = 'password';
                passwordIcon.className = 'bx bx-show';
            }
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `modern-notification notification-${type}`;
            notification.innerHTML = `
                <i class="bx ${type === 'success' ? 'bx-check-circle' : type === 'danger' ? 'bx-error' : 'bx-info-circle'}"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Event listeners
        document.getElementById('searchInput').addEventListener('input', filterEmployees);
        document.getElementById('roleFilter').addEventListener('change', filterEmployees);
    </script>

    <style>
        /* Modern Page Header */
        .page-header-modern {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 20px;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 10px 40px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }

        .page-header-modern::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -10%;
            width: 400px;
            height: 400px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
        }

        .page-title-modern {
            font-size: 1.75rem;
            font-weight: 700;
            margin: 0;
            position: relative;
            z-index: 1;
        }

        .page-subtitle-modern {
            margin: 0.5rem 0 0 0;
            opacity: 0.95;
            font-size: 0.95rem;
            position: relative;
            z-index: 1;
        }

        .btn-add-modern {
            background: white;
            color: #667eea;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            position: relative;
            z-index: 1;
        }

        .btn-add-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        /* Modern Statistics Cards */
        .employee-stat-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            gap: 1rem;
        }

        .employee-stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            transition: width 0.3s ease;
        }

        .stat-primary::before { background: linear-gradient(to bottom, #667eea, #764ba2); }
        .stat-danger::before { background: linear-gradient(to bottom, #ef4444, #dc2626); }
        .stat-success::before { background: linear-gradient(to bottom, #10b981, #059669); }
        .stat-info::before { background: linear-gradient(to bottom, #3b82f6, #2563eb); }

        .employee-stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);
        }

        .employee-stat-card:hover::before {
            width: 100%;
            opacity: 0.05;
        }

        .stat-icon-wrapper {
            flex-shrink: 0;
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.75rem;
        }

        .stat-primary .stat-icon { background: linear-gradient(135deg, #667eea15, #764ba215); color: #667eea; }
        .stat-danger .stat-icon { background: linear-gradient(135deg, #ef444415, #dc262615); color: #ef4444; }
        .stat-success .stat-icon { background: linear-gradient(135deg, #10b98115, #05966915); color: #10b981; }
        .stat-info .stat-icon { background: linear-gradient(135deg, #3b82f615, #2563eb15); color: #3b82f6; }

        .stat-info {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .stat-label {
            font-size: 0.875rem;
            color: #64748b;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #1e293b;
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .stat-badge span {
            background: #f1f5f9;
            color: #64748b;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-block;
        }

        /* Search & Filter Card */
        .search-filter-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .modern-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.5rem;
            display: block;
        }

        .modern-input-wrapper {
            position: relative;
        }

        .modern-input {
            width: 100%;
            padding: 0.75rem 1rem;
            padding-left: 2.5rem;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 0.9375rem;
            transition: all 0.2s ease;
            background: #f8fafc;
        }

        .modern-input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #94a3b8;
            font-size: 1.125rem;
            pointer-events: none;
        }

        .modern-select {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 0.9375rem;
            transition: all 0.2s ease;
            background: #f8fafc;
            cursor: pointer;
        }

        .modern-select:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn-filter, .btn-reset {
            padding: 0.75rem 1.25rem;
            border-radius: 12px;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9375rem;
        }

        .btn-filter {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-filter:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-reset {
            background: #f1f5f9;
            color: #64748b;
        }

        .btn-reset:hover {
            background: #e2e8f0;
        }

        /* Table Card */
        .employees-table-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .table-header {
            padding: 1.5rem;
            background: linear-gradient(to bottom, #fafafa, white);
            border-bottom: 1px solid #f1f5f9;
        }

        .table-title {
            margin: 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
        }

        /* Modern Table */
        .modern-table {
            width: 100%;
            border-collapse: collapse;
        }

        .modern-table thead th {
            background: #f8fafc;
            padding: 1rem 0.75rem;
            text-align: left;
            font-size: 0.75rem;
            font-weight: 700;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #e2e8f0;
        }

        .modern-table tbody td {
            padding: 1rem 0.75rem;
            border-bottom: 1px solid #f1f5f9;
        }

        .employee-row {
            transition: all 0.2s ease;
        }

        .employee-row:hover {
            background: #f8fafc;
        }

        .employee-number {
            display: inline-block;
            width: 32px;
            height: 32px;
            line-height: 32px;
            text-align: center;
            background: #f1f5f9;
            border-radius: 8px;
            font-weight: 600;
            color: #64748b;
            font-size: 0.875rem;
        }

        .employee-info-cell {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .employee-avatar {
            width: 45px;
            height: 45px;
            border-radius: 12px;
            background: linear-gradient(135deg, #667eea15, #764ba215);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: #667eea;
            flex-shrink: 0;
        }

        .employee-name {
            font-weight: 600;
            color: #1e293b;
            font-size: 0.9375rem;
            margin-bottom: 0.25rem;
        }

        .employee-email {
            font-size: 0.8125rem;
            color: #94a3b8;
        }

        .username-badge {
            background: #f1f5f9;
            padding: 0.375rem 0.75rem;
            border-radius: 8px;
            font-size: 0.8125rem;
            font-weight: 500;
            color: #64748b;
            display: inline-block;
        }

        .role-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            padding: 0.5rem 0.875rem;
            border-radius: 10px;
            font-size: 0.8125rem;
            font-weight: 600;
        }

        .role-admin {
            background: linear-gradient(135deg, #ef444410, #dc262610);
            color: #ef4444;
            border: 1.5px solid #ef444430;
        }

        .role-staff {
            background: linear-gradient(135deg, #10b98110, #05966910);
            color: #10b981;
            border: 1.5px solid #10b98130;
        }

        .role-chef {
            background: linear-gradient(135deg, #3b82f610, #2563eb10);
            color: #3b82f6;
            border: 1.5px solid #3b82f630;
        }

        .date-text {
            font-size: 0.875rem;
            color: #64748b;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            padding: 0.5rem 0.875rem;
            border-radius: 10px;
            font-size: 0.8125rem;
            font-weight: 600;
        }

        .status-active {
            background: linear-gradient(135deg, #10b98110, #05966910);
            color: #10b981;
            border: 1.5px solid #10b98130;
        }

        .status-inactive {
            background: #f1f5f9;
            color: #94a3b8;
            border: 1.5px solid #e2e8f0;
        }

        .action-buttons {
            display: flex;
            gap: 0.375rem;
            justify-content: center;
        }

        .action-btn {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1.5px solid;
            background: transparent;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1.125rem;
        }

        .action-view {
            color: #3b82f6;
            border-color: #3b82f630;
        }

        .action-view:hover {
            background: #3b82f6;
            color: white;
            transform: translateY(-2px);
        }

        .action-edit {
            color: #f59e0b;
            border-color: #f59e0b30;
        }

        .action-edit:hover {
            background: #f59e0b;
            color: white;
            transform: translateY(-2px);
        }

        .action-delete {
            color: #ef4444;
            border-color: #ef444430;
        }

        .action-delete:hover {
            background: #ef4444;
            color: white;
            transform: translateY(-2px);
        }

        /* Modern Modal */
        .modern-modal .modal-content {
            border-radius: 20px;
            border: none;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        }

        .modern-modal-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid #f1f5f9;
            background: linear-gradient(to bottom, #fafafa, white);
        }

        .modern-modal-header .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1e293b;
        }

        .btn-close-modern {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            background: #f1f5f9;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1.25rem;
            color: #64748b;
        }

        .btn-close-modern:hover {
            background: #e2e8f0;
            color: #1e293b;
        }

        .modern-modal-body {
            padding: 2rem;
        }

        .password-input-wrapper {
            position: relative;
        }

        .password-toggle-btn {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            font-size: 1.25rem;
            padding: 0.25rem;
        }

        .password-toggle-btn:hover {
            color: #64748b;
        }

        .modern-modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid #f1f5f9;
            background: #fafafa;
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        .btn-cancel-modal, .btn-save-modal {
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-cancel-modal {
            background: #f1f5f9;
            color: #64748b;
        }

        .btn-cancel-modal:hover {
            background: #e2e8f0;
        }

        .btn-save-modal {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-save-modal:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        /* Employee Detail View */
        .employee-detail-view {
            padding: 2rem;
            text-align: center;
        }

        .employee-detail-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea15, #764ba215);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 2.5rem;
            color: #667eea;
        }

        .employee-detail-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        .employee-detail-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            text-align: left;
        }

        .detail-item {
            padding: 1rem;
            background: #f8fafc;
            border-radius: 12px;
        }

        .detail-full {
            grid-column: 1 / -1;
        }

        .detail-label {
            font-size: 0.75rem;
            font-weight: 600;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }

        .detail-value {
            font-size: 0.9375rem;
            font-weight: 600;
            color: #1e293b;
        }

        /* Empty State */
        .empty-state {
            padding: 4rem 2rem;
            text-align: center;
        }

        .empty-icon {
            font-size: 4rem;
            color: #e2e8f0;
            margin-bottom: 1rem;
        }

        .empty-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #64748b;
            margin-bottom: 0.5rem;
        }

        .empty-text {
            color: #94a3b8;
            margin-bottom: 1.5rem;
        }

        /* Notification */
        .modern-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            z-index: 9999;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-weight: 500;
            transform: translateX(400px);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modern-notification.show {
            transform: translateX(0);
            opacity: 1;
        }

        .notification-success {
            background: #10b981;
            color: white;
        }

        .notification-danger {
            background: #ef4444;
            color: white;
        }

        .notification-warning {
            background: #f59e0b;
            color: white;
        }

        .notification-info {
            background: #3b82f6;
            color: white;
        }

        .modern-notification i {
            font-size: 1.25rem;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .page-header-modern {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .page-title-modern {
                font-size: 1.5rem;
            }

            .stat-number {
                font-size: 1.75rem;
            }

            .employee-detail-grid {
                grid-template-columns: 1fr;
            }

            .detail-full {
                grid-column: 1;
            }
        }

        /* Animation */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .employee-stat-card, .search-filter-card, .employees-table-card {
            animation: fadeInUp 0.5s ease-out;
        }
    </style>
}

@Html.AntiForgeryToken()

