@model QLNHWebApp.Models.Order
@{
    ViewData["Title"] = "Chỉnh sửa đơn hàng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var menuItems = ViewBag.MenuItems as List<QLNHWebApp.Models.MenuItem>;
    var tables = ViewBag.Tables as List<QLNHWebApp.Models.Table>;
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">
                    <i class="bx bx-edit me-2"></i>Chỉnh sửa đơn hàng #@Model.Id.ToString("D4")
                </h4>
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="@Url.Action("Dashboard", "Admin")">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "OrderManagement")">Hóa đơn</a></li>
                        <li class="breadcrumb-item active">Chỉnh sửa</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left Column: Order Info & Items -->
        <div class="col-lg-8">
            <!-- Customer Info Card -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bx bx-user me-2"></i>Thông tin khách hàng
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="fw-bold text-muted small">Tên khách hàng</label>
                            <p class="mb-0">@Model.CustomerName</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="fw-bold text-muted small">Số điện thoại</label>
                            <p class="mb-0">@Model.Phone</p>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="fw-bold text-muted small">Ngày đặt</label>
                            <p class="mb-0">@Model.Date.ToString("dd/MM/yyyy")</p>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="fw-bold text-muted small">Giờ</label>
                            <p class="mb-0">@Model.Time</p>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="fw-bold text-muted small">Số khách</label>
                            <p class="mb-0">@Model.Guests người</p>
                        </div>
                        <div class="col-12">
                            <label class="fw-bold text-muted small">Bàn hiện tại</label>
                            <div class="d-flex align-items-center">
                                <h5 class="mb-0 me-3">
                                    <span class="badge bg-secondary" id="currentTableBadge">
                                        <i class="bx bx-table me-1"></i>@(Model.Table?.Name ?? "Chưa có bàn")
                                    </span>
                                </h5>
                                <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal"
                                    data-bs-target="#changeTableModal">
                                    <i class="bx bx-refresh me-1"></i>Đổi bàn
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Items Card -->
            <div class="card">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bx bx-food-menu me-2"></i>Danh sách món ăn
                    </h5>
                    <button type="button" class="btn btn-sm btn-light" data-bs-toggle="modal"
                        data-bs-target="#addItemModal">
                        <i class="bx bx-plus me-1"></i>Thêm món
                    </button>
                </div>
                <div class="card-body p-0">
                    @if (Model.OrderItems != null && Model.OrderItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="orderItemsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Món ăn</th>
                                        <th class="text-center" style="width: 150px;">Số lượng</th>
                                        <th class="text-end">Đơn giá</th>
                                        <th class="text-end">Thành tiền</th>
                                        <th class="text-center" style="width: 100px;">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.OrderItems)
                                    {
                                        <tr data-item-id="@item.Id">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div>
                                                        <p class="mb-0 fw-semibold">@(item.MenuItem?.Name ?? "Món ăn")</p>
                                                        <small class="text-muted">@(item.MenuItem?.Category ?? "")</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-center">
                                                <div class="input-group input-group-sm justify-content-center">
                                                    <button class="btn btn-outline-secondary" type="button"
                                                        onclick="updateQuantity(@item.Id, -1)">
                                                        <i class="bx bx-minus"></i>
                                                    </button>
                                                    <input type="number" class="form-control text-center quantity-input"
                                                        style="max-width: 60px;" value="@item.Quantity" min="1"
                                                        onchange="setQuantity(@item.Id, this.value)">
                                                    <button class="btn btn-outline-secondary" type="button"
                                                        onclick="updateQuantity(@item.Id, 1)">
                                                        <i class="bx bx-plus"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td class="text-end">@item.Price.ToString("C0", new
                                                                                        System.Globalization.CultureInfo("vi-VN"))</td>
                                            <td class="text-end fw-bold">@((item.Price * item.Quantity).ToString("C0", new
                                                                                        System.Globalization.CultureInfo("vi-VN")))</td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                    onclick="removeItem(@item.Id)" title="Xóa món">
                                                    <i class="bx bx-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-5">
                            <i class="bx bx-food-menu" style="font-size: 3rem; color: #ccc;"></i>
                            <p class="text-muted mt-3">Chưa có món ăn nào</p>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addItemModal">
                                <i class="bx bx-plus me-1"></i>Thêm món đầu tiên
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column: Summary & Actions -->
        <div class="col-lg-4">
            <!-- Total Summary Card -->
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">
                        <i class="bx bx-calculator me-2"></i>Tổng cộng
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3 pb-3 border-bottom">
                        <span class="text-muted">Tạm tính:</span>
                        <span class="fw-bold" id="subtotal">@Model.TotalPrice.ToString("C0", new
                                                        System.Globalization.CultureInfo("vi-VN"))</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3 pb-3 border-bottom">
                        <span class="text-muted">VAT (10%):</span>
                        <span class="fw-bold" id="vat">@((Model.TotalPrice * 0.1m).ToString("C0", new
                                                        System.Globalization.CultureInfo("vi-VN")))</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <h5 class="mb-0">Tổng cộng:</h5>
                        <h4 class="mb-0 text-success" id="grandTotal">@((Model.TotalPrice * 1.1m).ToString("C0", new
                                                        System.Globalization.CultureInfo("vi-VN")))</h4>
                    </div>
                </div>
            </div>

            <!-- Actions Card -->
            <div class="card">
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success btn-lg" onclick="processPayment()">
                            <i class="bx bx-dollar me-2"></i>Thanh toán
                        </button>
                        <a href="@Url.Action("PrintInvoice", new { id = Model.Id })" class="btn btn-outline-info btn-lg"
                            target="_blank">
                            <i class="bx bx-printer me-2"></i>In hóa đơn
                        </a>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-lg">
                            <i class="bx bx-arrow-back me-2"></i>Quay lại
                        </a>
                    </div>
                </div>
            </div>

            <!-- Status Card -->
            <div class="card mt-3">
                <div class="card-body">
                    <label class="fw-bold text-muted small d-block mb-2">Trạng thái đơn hàng</label>
                    <span class="badge bg-@(Model.Status == "Đang phục vụ" ? "primary" : "warning") fs-6">
                        @Model.Status
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="addItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="addItemModalLabel">
                    <i class="bx bx-plus-circle me-2"></i>Thêm món ăn
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Search Box -->
                <div class="mb-3">
                    <input type="text" class="form-control" id="menuSearch" placeholder="🔍 Tìm kiếm món ăn..."
                        onkeyup="filterMenuItems()">
                </div>

                <!-- Menu Items Grid -->
                <div class="menu-items-container" style="max-height: 500px; overflow-y: auto;">
                    @if (menuItems != null)
                    {
                        @foreach (var category in menuItems.GroupBy(m => m.Category))
                        {
                            <div class="category-section mb-4">
                                <h6 class="text-primary fw-bold mb-3">
                                    <i class="bx bx-food-menu me-1"></i>@category.Key
                                </h6>
                                <div class="row g-3">
                                    @foreach (var item in category)
                                    {
                                        <div class="col-md-4 menu-item" data-name="@item.Name.ToLower()"
                                            data-category="@category.Key.ToLower()">
                                            <div class="card menu-card h-100 shadow-sm">
                                                <div class="card-body p-3">
                                                    <h6 class="card-title mb-2">@item.Name</h6>
                                                    <p class="text-success fw-bold mb-3">
                                                        @item.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                                                    </p>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <input type="number" class="form-control form-control-sm quantity-input"
                                                            id="qty_@item.Id" value="1" min="1" max="99" style="width: 70px;">
                                                        <button type="button" class="btn btn-primary btn-sm flex-grow-1"
                                                            onclick="addItem(@item.Id, document.getElementById('qty_@item.Id').value)">
                                                            <i class="bx bx-plus"></i> Thêm
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Change Table Modal -->
<div class="modal fade" id="changeTableModal" tabindex="-1" aria-labelledby="changeTableModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeTableModalLabel">
                    <i class="bx bx-refresh me-2"></i>Đổi bàn
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Chọn bàn mới</label>
                    <select class="form-select" id="newTableSelect">
                        <option value="">-- Chọn bàn --</option>
                        @if (tables != null)
                        {
                            @foreach (var floor in tables.GroupBy(t => t.Floor))
                            {
                                <optgroup label="@floor.Key">
                                    @foreach (var table in floor)
                                    {
                                        <option value="@table.Id">@table.Name (Sức chứa: @table.Capacity người)</option>
                                    }
                                </optgroup>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="changeTable()">Xác nhận đổi bàn</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const orderId = @Model.Id;

        // Filter menu items by search
        function filterMenuItems() {
            const searchText = document.getElementById('menuSearch').value.toLowerCase();
            const menuItems = document.querySelectorAll('.menu-item');

            menuItems.forEach(item => {
                const name = item.getAttribute('data-name');
                const category = item.getAttribute('data-category');

                if (name.includes(searchText) || category.includes(searchText)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });

            // Hide empty categories
            document.querySelectorAll('.category-section').forEach(section => {
                const visibleItems = section.querySelectorAll('.menu-item:not([style*="display: none"])');
                section.style.display = visibleItems.length > 0 ? '' : 'none';
            });
        }

        // Add item to order
        function addItem(menuItemId, quantity) {
            quantity = parseInt(quantity);
            if (!quantity || quantity <= 0) {
                showToast('Vui lòng nhập số lượng hợp lệ!', 'warning');
                return;
            }

            // Disable button temporarily
            const btn = event.target.closest('button');
            const originalText = btn.innerHTML;
            const quantityInput = document.getElementById(`qty_${menuItemId}`);
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Đang thêm...';

            fetch('/OrderManagement/AddItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId: orderId, menuItemId: menuItemId, quantity: quantity })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');

                        // Reset quantity input về 1
                        if (quantityInput) {
                            quantityInput.value = 1;
                        }

                        // Enable lại button
                        btn.disabled = false;
                        btn.innerHTML = originalText;

                        // Cập nhật tổng tiền nếu có
                        if (data.totalPrice) {
                            updateTotalPrice(data.totalPrice);
                        }

                        // Reload lại danh sách món sau 1 giây để xem món vừa thêm
                        setTimeout(() => {
                            location.reload();
                        }, 800);
                    } else {
                        showToast(data.message, 'error');
                        btn.disabled = false;
                        btn.innerHTML = originalText;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Có lỗi xảy ra khi thêm món!', 'error');
                    btn.disabled = false;
                    btn.innerHTML = originalText;
                });
        }

        // Update total price display
        function updateTotalPrice(totalPrice) {
            const formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            });

            const subtotal = document.getElementById('subtotal');
            const vat = document.getElementById('vat');
            const grandTotal = document.getElementById('grandTotal');

            if (subtotal) subtotal.textContent = formatter.format(totalPrice);
            if (vat) vat.textContent = formatter.format(totalPrice * 0.1);
            if (grandTotal) grandTotal.textContent = formatter.format(totalPrice * 1.1);
        }

        // Remove item from order
        function removeItem(orderItemId) {
            if (!confirm('Bạn có chắc muốn xóa món này?')) return;

            fetch('/OrderManagement/RemoveItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderItemId: orderItemId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi xóa món!');
                });
        }

        // Update quantity (increase/decrease)
        function updateQuantity(orderItemId, change) {
            const input = document.querySelector(`tr[data-item-id="${orderItemId}"] .quantity-input`);
            const newQuantity = parseInt(input.value) + change;

            if (newQuantity > 0) {
                setQuantity(orderItemId, newQuantity);
            }
        }

        // Set specific quantity
        function setQuantity(orderItemId, quantity) {
            quantity = parseInt(quantity);
            if (quantity <= 0 || isNaN(quantity)) {
                alert('Số lượng phải lớn hơn 0!');
                return;
            }

            fetch('/OrderManagement/UpdateQuantity', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderItemId: orderItemId, quantity: quantity })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi cập nhật số lượng!');
                });
        }

        // Change table
        function changeTable() {
            const newTableId = document.getElementById('newTableSelect').value;
            if (!newTableId) {
                alert('Vui lòng chọn bàn mới!');
                return;
            }

            fetch('/OrderManagement/ChangeTable', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId: orderId, newTableId: parseInt(newTableId) })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi đổi bàn!');
                });
        }

        // Process payment
        function processPayment() {
            if (!confirm('Xác nhận thanh toán đơn hàng này?')) return;

            fetch('/OrderManagement/Payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId: orderId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        window.open('/OrderManagement/PrintInvoice/' + orderId, '_blank');
                        setTimeout(() => window.location.href = '/OrderManagement', 1000);
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi thanh toán!');
                });
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            const bgColors = {
                'success': 'bg-success',
                'error': 'bg-danger',
                'warning': 'bg-warning',
                'info': 'bg-info'
            };

            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white ${bgColors[type] || 'bg-info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.style.position = 'fixed';
            toast.style.top = '20px';
            toast.style.right = '20px';
            toast.style.zIndex = '9999';
            toast.style.minWidth = '300px';

            toast.innerHTML = `
                            <div class="d-flex">
                                <div class="toast-body">
                                    ${message}
                                </div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                            </div>
                        `;

            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();

            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    </script>

    <style>
        /* Menu Card Styles */
        .menu-card {
            transition: all 0.3s ease;
            border: 2px solid #e3e6f0;
            border-radius: 12px;
            overflow: hidden;
        }

        .menu-card:hover {
            border-color: #667eea;
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.15);
        }

        .menu-card .card-title {
            color: #2c3e50;
            font-size: 1rem;
            font-weight: 600;
        }

        .menu-items-container {
            padding-right: 8px;
        }

        .menu-items-container::-webkit-scrollbar {
            width: 8px;
        }

        .menu-items-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .menu-items-container::-webkit-scrollbar-thumb {
            background: #667eea;
            border-radius: 10px;
        }

        .menu-items-container::-webkit-scrollbar-thumb:hover {
            background: #5568d3;
        }

        .quantity-input {
            text-align: center;
            font-weight: 600;
            border: 2px solid #e3e6f0;
            border-radius: 8px;
        }

        .quantity-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .category-section {
            animation: fadeIn 0.3s ease-in;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #menuSearch {
            border-radius: 12px;
            border: 2px solid #e3e6f0;
            padding: 12px 16px;
            font-size: 1rem;
        }

        #menuSearch:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.15);
        }

        .modal-header.bg-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }
    </style>
}
